package dao.impl;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import dao.LogFileDao;
import entity.LogFile;

public class LogFileDaoImpl implements LogFileDao{
	public LogFileDaoImpl(){
		
	}

	@Override
	public void create(LogFile logfile) {
		try {
			Configuration config = new Configuration().configure();
			@SuppressWarnings("deprecation")
			SessionFactory sessionFactory = config.buildSessionFactory();
			Session session=sessionFactory.openSession();
			Transaction tx=session.beginTransaction();
			session.save(logfile);
			tx.commit();
			session.close();
			sessionFactory.close();
			System.out.println("ok");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void delete(LogFile logfile) {
		try {
			Configuration config = new Configuration().configure();
			@SuppressWarnings("deprecation")
			SessionFactory sessionFactory = config.buildSessionFactory();
			Session session=sessionFactory.openSession();
			Transaction tx=session.beginTransaction();
			LogFile log = findById(logfile.getId());
			session.delete(log);
			tx.commit();
			session.close();
			sessionFactory.close();
		} catch (Exception e) {
			e.printStackTrace();
		}			
	}

	@Override
	public void delete(List<LogFile> logfilelist) {
		try {
			Configuration config = new Configuration().configure();
			@SuppressWarnings("deprecation")
			SessionFactory sessionFactory = config.buildSessionFactory();
			Session session=sessionFactory.openSession();
			Transaction tx=session.beginTransaction();
			LogFile log_tmp = null;
			for(int i=0;i<logfilelist.size();i++){
				log_tmp=findById(logfilelist.get(i).getId());
				session.delete(log_tmp);
			}			
			tx.commit();
			session.close();
			sessionFactory.close();
		} catch (Exception e) {
			e.printStackTrace();
		}	
		
	}

	@Override
	public LogFile findById(int id) {
		try {
			Configuration config = new Configuration().configure();
			@SuppressWarnings("deprecation")
			SessionFactory sessionFactory = config.buildSessionFactory();
			Session session=sessionFactory.openSession();

			String hql = "from entity.LogFile as logfile where logfile.id = " + id;
			Query query = session.createQuery(hql);
			@SuppressWarnings("unchecked")
			List<LogFile> list = query.list();

			if ((list.size()) == 0)
				return null;
			else
				return (LogFile) list.get(0);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<LogFile> findByStaff(String staffid) {
		try {
			Configuration config = new Configuration().configure();
			@SuppressWarnings("deprecation")
			SessionFactory sessionFactory = config.buildSessionFactory();
			Session session=sessionFactory.openSession();

			String hql = "from entity.LogFile as logfile where logfile.staffid ='" + staffid + "'";
			Query query = session.createQuery(hql);
			@SuppressWarnings("unchecked")
			List<LogFile> list = query.list();

			if ((list.size()) == 0)
				return null;
			else
				return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<LogFile> findByDatetime(String datestart, String dateend) {
		try {
			Configuration config = new Configuration().configure();
			@SuppressWarnings("deprecation")
			SessionFactory sessionFactory = config.buildSessionFactory();
			Session session=sessionFactory.openSession();

			String hql = "from entity.LogFile as logfile where logfile.datetime >= '"+ datestart 
					     +"' and logfile.datetime <= '"+ dateend +"'";
			Query query = session.createQuery(hql);
			@SuppressWarnings("unchecked")
			List<LogFile> list = query.list();

			if ((list.size()) == 0)
				return null;
			else
				return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

}
